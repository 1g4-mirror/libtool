2000-05-26  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>

	* configure.in (GCJ): Check.
	* Makefile.am (CFLAGS, CPPFLAGS, CXXFLAGS, LDFLAGS, LIBS): Let
	automake define them implicitly.
	(EXTRA_DIST, pkgdata_DATA): Added ltcf-gcj.sh.
	(LIBTOOL_DEPS, LIBTOOL_CXX_DEPS, LIBTOOL_GCJ_DEPS): Define.
	(libtool): Depend on LIBTOOL_DEPS.  Add GCJ tag.
	(libtool, clibtool): Pass host_triplet to ltconfig.

	* libtool.m4 (_AC_PROG_LIBTOOL): Run before AC_LIBTOOL_GCJ.
	Add ltcf-c.sh to LIBTOOL_DEPS.  Run AC_LIBTOOL_CXX and
	AC_LIBTOOL_GCJ on demand.
	(AC_PROVIDE_IFELSE): Define for non-CVS autoconf compatibility.
	(AC_LIBTOOL_CXX): Accept multiple executions.  Add ltcf-cxx.sh
	to LIBTOOL_DEPS.  Reset config.log output.
	(AC_LIBTOOL_GCJ): New macro.
	* libtoolize.in: Copy ltcf-cxx.sh if AC_PROG_CXX is found.
	Copy ltcf-gcj.sh when appropriate.
	* doc/libtool.texi (AC_LIBTOOL_CXX): Doesn't have to be
	explicitly called.
	(AC_LIBTOOL_GCJ): Document.
	* tagdemo/configure.in (AC_LIBTOOL_CXX): Don't call.

	* ltmain.in (xform): Recognize *.class and *.java.
	(pic_flag): Do not add -DPIC.
	* ltcf-c.sh (ac_cv_prog_cc_pic): Add -DPIC.
	* ltcf-cxx.sh (ac_cv_prog_cc_pic): Add -DPIC.
	* ltcf-gcj.sh: New file, mostly copied from ltcf-cxx.sh.

	* ltmain.in: Output libobj file in a temporary file, then
	rename it.

	* ltconfig.in: Make the output script executable after updating
	available_tags.

	* ltmain.in (compile): When output object is in subdir, create
	the pic_object in subdir/objdir, not objdir/subdir.

2000-05-24  Ossama Othman  <ossama@debian.org>

	* libtool.m4 (AC_LIBTOOL_PICMODE): Merged this macro from the HEAD
	branch.
	(AC_LIBTOOL_CXX): Made sure CXX is exported to ltconfig.
	* ltcf-cxx.sh (ac_ext): Changed test source extension to "cc" to
	avoid potential ambiguities when using case-insensitive shells.
	(archive_expsym_cmds): Make sure soname is set otherwise
	-retain-symbol-file feature won't work.  The change was made for
	the Linux Compaq C++ and GNU G++ configurations.
	Reported by Stephan Kulow <coolo@kde.org>.
	* ltconfig.in, ltmain.in: Merged in changes from the HEAD branch.
	* tests/Makefile.am (clean-local): Fixed typo where a "distclean"
	was done in `mdemo' instead of the `tagdemo'.

2000-05-14  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>

	* configure.in (ACINCLUDE_M4_LIST): Removed libltdl/acinclude.m4.
	* Makefile.am (aclocal_macros): Added ltdl.m4.
	(libltdl/acinclude.m4): Concatenate libtool.m4 and ltdl.m4.
	* bootstrap: Remove duplicate libltdl.

	* libtool.m4 (AC_LIBLTDL_CONVENIENCE, AC_LIBLTDL_INSTALLABLE):
	Pick LIBLTLD from top_builddir and INCLTDL from top_srcdir.
	* mdemo/configure.in: Remove comments on
	AC_LIBLTLD_CONVENIENCE.

	* configure.in: Look for C++ compiler.
	* Makefile.am (libtool): Configure CXX tag.
	* tests/Makefile.am: Test tagdemo only if CXX found.

	* libtool.m4 (_AC_PROG_LIBTOOL): Renamed from...
	(AC_PROG_LIBTOOL): Just AC_REQUIRE(_AC_PROG_LIBTOOL), to avoid
	effects of multiple runs.
	(_AC_PROG_LIBTOOL): Use AC_BEFORE to warn if called before
	AC_LIBTOOL_CXX.

	* tagdemo/Makefile.am (lib_LTLIBRARIES): Moved libbaz.la from
	noinst_LTLIBRARIES.

	* configure.in: Bump version number to 1.4a, since this will
	eventually become libtool 1.5.

2000-02-28  Ossama Othman  <ossama@debian.org>

	* ltmain.in (libobjs, reload_conv_objs): When searching for object
	files, search for "*.$objext," not "*.o."
	(compile_command, finalize_command, progfiles): No need to
	transform `.lo'	objects into standard `.o' objects.  `.lo' files
	are converted to the appropriate `.o' file earlier in the link
	mode code.
	* doc/libtool.texi (AC_LIBTOOL_CXX): Documented this
	macro, and the `tagdemo' test that utilizes it.  Updated C++ and
	tagged configuration documentation.

2000-02-25  Ossama Othman  <ossama@debian.org>

	* libtool.m4, ltconfig.in: Merged in changes from most recent HEAD
	branch version.
	* ltmain.in: Merged in changes from most recent HEAD branch
	version (ILD updates), and fixed parallel build error.
	* tagdemo/acinclude.m4, tagdemo/aclocal.m4, tagdemo/configure:
	regenerated these files against updated libtool.m4.

2000-02-22  Ossama Othman  <ossama@debian.org>

	* libtool.m4 (AC_LIBTOOL_CXX): Added missing "$lt_target" command
	line argument in call to `ltconfig'.  This fixes a problem that
	was occuring when a host type was specified by the user.  Also
	added missing "$reload_flag" environment.

2000-02-17  Ossama Othman  <ossama@debian.org>

	* libtoolize.in (files): Add C++ support if configure.in uses
	AC_LIBTOOL_CXX, i.e. add `ltcf-cxx.sh' to list of files to be
	copied during libtoolization.
	* ltdl.m4: Added this file to the multi-language branch.

2000-02-08  Ossama Othman  <ossama@debian.org>

	* ltcf-cxx.sh (predeps, postdeps, predep_objects,
	postdep_objects): Split {pre,post}deps into a variable that hold
	library dependencies and another that holds objects needed during
	shared library generation.  This was needed so that the objects
	needed for shared library generation do not get analyzed by the
	ILD mechanism.  The objects are only used during the initial
	creation of the shared library, not during subsequent links to
	that library.
	(archive_cmds, archive_expsym_cmds): Added $predep_objects before
	all objects and libraries, and $postdep_objects after them.  This
	is necessary when linking C++ shared libraries.
	(output_verbose_link_cmds): Added shared library generation
	compiler flag.  The objects and libraries the compiler links when
	creating shared libraries may be different than those used when
	linking programs, particulary for object files.
	* ltconfig.in (predep_objects, postdep_objects): Include these
	variables in the generated libtool script.
	* ltmain.in: Quote regular expression used for automatic tagged
	configuration selection.  Also improved the regular expression
	used for matching.
	Updated clean mode to work properly with the new `.lo' files.
	(libs): Only add $predeps and $postdeps to the list of dependency
	libraries when linking a library.
	* tagdemo/Makefile.am (noinst_LTLIBRARIES): Added another test
	library that depends on the existing test library.  It was added
	to exercise the ILD mechanism when using tagged configurations.
	(tagdemo_LDADD): The tagdemo program now depends on the new test
	library.  Since the new test library depends on the previous one,
	the previous library should be linked to the program as well.
	* Makefile.in: Regenerated from updated Makefile.am.
	* tagdemo/baz.cpp, tagdemo/baz.h: Added these sources.  They are
	new test library sources.
	* tagdemo/main.cpp (main): Added call to method in new test
	library.

2000-02-05  Ossama Othman  <ossama@debian.org>

	* ltmain.in: The "-R*" case in the loop that iterates through
	library dependencies doesn't handle the case of the "lib" link
	mode.  As such, the next iteration should immediately follow.  The
	"continue" inside the "if" block has been moved outside that
	block. 	Previously, the "-R*" case would just "fall through" when
	in "lib" link mode, but $lib="" which caused a "library not found"
	error later on.
	Reported by Stephan Kulow <coolo@kde.org>

2000-02-05  Ossama Othman  <ossama@debian.org>

	* bootstrap: Merged updates from HEAD branch.
	(sub): Added tagdemo to list of subdirectories to be
	bootstrapped.
	* ltcf-cxx.sh (AR): Removed redefinition of $AR to C++ compiler on
	Solaris for the Sun C++ and Green Hills C++ compilers.  `ar' must
	be used to extract object files from the archives, despite the
	fact that the archive must be created by the compiler.
	Reported by Stephan Kulow <coolo@kde.org>
	(predeps, postdeps): Remove any space between "-{L,R}" and the
	path.  Some compilers, such as HP aCC add space between them.
	* ltconfig.in (dlopen, dlopen_support): Merged updates from HEAD
	branch.
	* ltmain.in: Merged updates from HEAD branch.
	(libext): Do not reset $libext to `al' when creating convenience
	libraries.  Some compilers have problems with such a non-standard
	extension.
	Reported by Stephan Kulow <coolo@kde.org>
	* doc/libtool.texi: Merged updates from HEAD branch.
	* libltdl/Makefile.am, libltdl/configure.in, libltdl/ltdl.c,
	libltdl/ltdl.h: Merged updates from HEAD branch.

2000-02-03  Ossama Othman  <ossama@debian.org>

	* ltconfig.in (available_tags): The name of each newly added
	tagged configuration is appended to this list.  This is done at
	ltconfig time so that the generated `libtool' script need not
	determine which tags it supports everytime it is used.  The
	available_tags variable is used by `ltmain.in' to iterate over
	each of the tagged configurations when attempting to automatically
	choose which one to use for the supplied compile/link command.
	* ltmain.in: Added ability to automatically determine which tagged
	configuration to use based on the compiler found in the supplied
	base compile command.
	(available_tags): This new variable contains a list of available
	tagged configurations.  This gets generated at ltconfig time.
	(object_name, old_object): Renamed these to pic_object and
	non_pic_object, respectively.
	* doc/libtool.texi (Configuration tags): Updated documentation.
	Libtool now has the ability to infer which tagged configuration to
	use based on the compiler found in the supplied base compile
	command.
	* tagdemo/configure.in, tagdemo/configure: Removed explicit
	substitution of "--tag=CXX" in $LIBTOOL.  The newly added
	automatic selection of tagged configurations obviates the need to
	explicitly specify which tag to use.

2000-02-01  Ossama Othman  <ossama@uci.edu>

	* ltcf-cxx.sh: Added some untested HPUX aCC support.
	* ltmain.in: Inadvertently removed some of the tags patch.
	* tagdemo/Makefile.am, tagdemo/Makefile.in, tagdemo/README,
	tagdemo/acinclude.m4, tagdemo/aclocal.m4, tagdemo/configure,
	tagdemo/configure.in, tagdemo/foo.cpp, tagdemo/foo.h,
	tagdemo/main.cpp: *sigh* I checked this directory into the HEAD
	branch instead of the multi-language-branch.
	Reported by Stephan Kulow <coolo@kde.org>

2000-01-31 Ossama Othman  <ossama@debian.org>

	* configure.in (CONF_SUBDIRS): Added the `tagdemo' directory to
	the list.
	* ltcf-cxx.sh: Remove any residual `a.out' files resulting from
	the "eval $output_verbose_link_cmds."
	* ltconfig.in: Cleaned up nested quotes that were introduced with
	the tags patch.  This fixes part sh.test failure.
	* ltmain.in: Check if "$run" is of zero length before creating a
	`.lo' file.  This fixes the dryrun.test failure.
	Cleaned up nested quotes that were introduced with
	the tags patch.  This fixes another part sh.test failure.
	Remove "$libobj" not "libobj."
	Exit with an error if both $object_name and $old_object are set to
	"none" in the corresponding `.lo' file.  This should never happen.
	Changed remaining uses of "mkdir" to "$mkdir."
	Added dry run case to `.lo' case in link mode.  This fixes the
	link-2.test failure.
	(object_name, old_object): Prepend the subdirectory the `.lo'
	resides in to the object names extracted from the `.lo' file.
	This fixes the build-relink2.test failure.
	(tempemovelist): Use $echo "X..." instead of echo "..." since
	$Xsed is being used.  This fixes the last part of the sh.test
	failure.
	* tagdemo/Makefile.am, tagdemo/Makefile.in, tagdemo/README,
	tagdemo/acinclude.m4, tagdemo/aclocal.m4, tagdemo/configure,
	tagdemo/configure.in, tagdemo/foo.cpp, tagdemo/foo.h,
	tagdemo/main.cpp, tests/tagdemo-conf.test tests/tagdemo-exec.test
	tests/tagdemo-make.test tests/tagdemo-shared.test
	tests/tagdemo-static.test: Added a new tagdemo that exercises
	libtool's tagged configuration support found in the multilanguage
	branch.
	* tests/Makefile.am (TESTS): Added the tagdemo tests to the list.
	* tests/quote.test: Updated to HEAD branch version.  This fixes
	the quote.test failure.

2000-01-31 Ossama Othman  <ossama@debian.org>

	* ltconfig.in (compile_c_lo): Removed the test that checks if
	compiler support "-c -o file.lo" since the changes made to
	ltmain.in remove the need to do this.
	* ltmain.in:  Changed compile mode to generate `.lo' libtool
	objects, instead of generating PIC objects that end in `.lo'.
	These are analogous to libtool archive `.la' files.  They contain
	the name of the PIC and non-PIC objects.  All PIC objects will now
	be placed in `$objdir' (usually `.libs').  No changes to existing
	Makefiles should be necessary.  Libtool should work the same as it
	did prior to this change.  This change was necessary to correct a
	problem with Sun C++'s template repository mechanism since it
	couldn't handle repository objects ending in `.lo'.  This change
	causes some tests to fail, so it still needs some work.  The tests
	that fail are: dryrun.test, build-relink2.test, link-2.test.  The
	quote.test and sh.test tests also fail but they failed after the
	initial multi-language changes were made.

2000-01-25  Ossama Othman  <ossama@uci.edu>

	* libtool.m4, ltconfig.in, ltmain.in:  Merged updates found in
	HEAD branch.

	* ltcf-c.sh: Merged updates related to PIC flags and link
	characteristics from HEAD branch ltconfig.in.

2000-01-22  Ossama Othman  <ossama@debian.org>

	* libtool.m4 (AC_LIBTOOL_CXX): Added LDFLAGS to list of variables to
	pass to ltconfig when creating C++ compiler tag.

	* ltcf-cxx.sh: Added support for the DEC/Compaq C++ compiler on
	Linux and osf[3,4,5].

	(whole_archive_flag_spec): Corrected commands that check if GNU
	linker supports "--whole-archive" flag.  GNU C++'s
	"-print-prog-name" flag is used to determine what the linker is
	instead of using the 'LD' variable.

	(ac_cv_prog_cc_wl): Corrected value for Sun C++.  Previously it
	was set to '-Wl,' when it should have been '-Qoption ld '.

	* ltconfig.in (ac_cv_prog_cc_pic_works,
	ac_cv_prog_cc_static_works): Make sure variable is not an empty
	string, even if it is set.

1999-12-06  Ossama Othman  <ossama@debian.org>

	* ltcf-c.sh: split off the osf3 section, so that the osf4 and osf5
	sections can add `-msym' to arguments passed to the linker for
	shared libs.
	Reported by Tim Mooney  <mooney@dogbert.cc.ndsu.NoDak.edu>

1999-12-05  Ossama Othman  <ossama@debian.org>

	* libtool.m4 (AC_LIBTOOL_SETUP): Temporarily reset the test
	language to C just before calling AC_OBJEXT and AC_EXEEXT and then
	restore the previous one when done, instead of doing an
	AC_BEFORE(...AC_LANG_CPLUSPLUS...).  A warning would always occur
	anyway because AC_PROG_CXX calls AC_LANG_CPLUSPLUS.

1999-12-05  Ossama Othman  <ossama@debian.org>

	* libtool.m4 (AC_LIBTOOL_SETUP): Make sure AC_LIBTOOL_SETUP is
	called before any macros that set the autoconf test language
	(e.g. AC_LANG_CPLUSPLUS).  Autoconf's AC_EXEEXT macro only works
	for C compilers.  AC_EXEEXT gets confused and thinks that an
	extension such as the C++ source file extenstion ".C" is an
	executable file extension, which screws up the libtool
	configuration.

	Pass the same autoconf variables used in the main ltconfig run to
	the ltconfig configuration tag run (with the exception of a few).
	This probably isn't necessary but I think it is a good idea to do
	so.

	* ltconfig.in: The tagged configuration was being cached and
	overwriting the C compiler cached configuration.  For now,
	the tagged configuration will not be cached.

1999-12-04  Ossama Othman  <ossama@debian.org>

	* ltconfig.in: Made "appending to libtool" message more
	descriptive.

1999-12-04  Ossama Othman  <ossama@debian.org>

	With this latest set of updates I was able to build a C++ shared
	library using a C++ configuration tag for g++ on Linux!  Some may
	think that this isn't much of an accomplishment but static
	constructors appear to work now, whereas prior to the addition of
	the multi-language support patches they didn't.

	* libtool.m4 (AC_LIBTOOL_CXX): Made invocation of ltconfig more
	like the one in AC_PROG_LIBTOOL.  This adds some ILD related flags
	to the invocation, in addition to providing the $libtool_flags to
	ltconfig that was previously in AC_PROG_LIBTOOL (via
	AC_LIBTOOL_SETUP).  This fixes an ILD related bug with the C++
	support, and also fixes a problem where both the static and shared
	libraries were being built even if one of them was explicitly
	disabled.
	
	* ltcf-cxx.sh: Make sure $ac_cv_prog_cc_pic_works and
	$ac_cv_prog_cc_static_works are unset since their C compiler
	cached values will override their C++ compiler specific values.
	Note that it was not enough to reset their values.  They had to be
	unset.

1999-12-04  Ossama Othman  <ossama@debian.org>

	* doc/libtool.texi: Moved "LTCC" in "--add-tag" example before
	"CC" because users may inadvertently do something like the
	following:

		CC=$CXX LTCC=$CC ./ltconfig --add-tag=...

	Doing the above would set LTCC to the C++ compiler ($CXX), which
	is incorrect since LTCC should be the C compiler.  Also added
	documentation explaining this potential problem.

	* Makefile.am (EXTRA_DIST): Added ltcf-c.sh, ltcf-cxx.sh and
	ChangeLog.1 to list of files to include in the distribution.
	(pkgdata_DATA): Added ltcf-sh.sh and ltcf-cxx.sh to the list of
	data files.

	* libtool.m4 (AC_LIBTOOL_CPP): Change name of macro that enables
	C++ support in libtool from "AC_LIBTOOL_CPP" to "AC_LIBTOOL_CXX."
	"CPP" is typically associated with preprocessors, whereas CXX is
	associated with C++ compilers.

	Moved LTCC before CC in call to ltconfig to make sure LTCC is not
	set to the compiler pointed to by CC after CC has been reset to
	another compiler.

	Call ltconfig with ${CONFIG_SHELL-/bin/sh} just like we do in
	AC_PROG_LIBTOOL.

	Save value of $CC and $CFLAGS before resetting them for use with
	configuration tags.

	* libtoolize.in (files): Added ltcf-c.sh to list of files related
	to "libtoolization."  Until we decide if other compiler/language
	libtool configuation scripts should also be included in the file
	list, leave out ltcf-cxx.sh for now.

	* ltcf-cxx.sh (ld_shlibs): Disable shared library support for
	currently unconfigured platforms. Updated IRIX, Linux and Solaris
	link characteristics.  They now match more with their C compiler
	counterparts.

	* ltconfig.in: Corrected tag name variable in "END LIBTOOL TAG
	CONFIG: $tagname" text.

1999-12-03  Ossama Othman  <ossama@debian.org>

	* Makefile.am, libtool.m4, ltconfig.in, ltmain.in,
	doc/libtool.texi, tests/defs: The beginnings of
	multi-compiler/language support in libtool.

	Integrated Alexandre's configuration tags patch, part of Thomas'
	patch and part of my patch.

	These patches make it possible for libtool to support
	compilers besides C compilers.  This also includes support for
	linkers besides `ld', and similarly for other tools commonly used
	for development.  See the libtool documentation for more details.

	Moved all C compiler related configuration code to `ltcf-c.sh',
	described below.

	Multi-compiler/language still isn't complete but testing is now
	possible.

	* ltcf-c.sh: Added this file.  It contains all of the C compiler
	related configuration code that was previously in ltconfig.in.
	This script is meant to be sourced by the ltconfig script alone.
	It is not meant for use by the user.  Eventually, the contents of
	this file will be moved to `libtool.m4'.

	* ltcf-cxx.sh: Added this file.  It contains C++ compiler related
	configuration code (e.g. C++ compiler as linker, etc).  It is
	meant to be used	when creating configuration tags using the
	newly added "--add-tag" ltconfig option.  See the libtool
	documentation for more details.  Eventually, the contents of this
	file will be moved to 	`libtool.m4'.

	This script also includes support for extracting the objects and
	libraries the compiler would use when linking a C++ binary.  This
	support should allow static constructors and the like to work
	properly.

Continued in ChangeLog.1

	$Revision$ $Date$
