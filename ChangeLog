Sun Dec  5 16:34:04 1999  Ossama Othman  <othman@cs.wustl.edu>

	* libtool.m4:

	Make sure AC_LIBTOOL_SETUP is called before any macros that set
	the autoconf test language (e.g. AC_LANG_CPLUSPLUS).  Autoconf's
	AC_EXEEXT macro only works for C compilers.  AC_EXEEXT gets
	confused and thinks that an extension such as the C++ source file
	extenstion ".C" is an executable file extension, which screws up
	the libtool configuration.

	Pass the same autoconf variables used in the main ltconfig run to
	the ltconfig configuration tag run (with the exception of a few).
	This probably isn't necessary but I think it is a good idea to do
	so.

	* ltconfig.in:

	The tagged configuration was being cached and overwriting the C
	compiler cached configuration.  For now, the tagged configuration
	will not be cached.

Sat Dec  4 18:59:57 1999  Ossama Othman  <othman@cs.wustl.edu>

	* ltconfig.in:

	Made "appending to libtool" message more descriptive.

Sat Dec  4 18:26:02 1999  Ossama Othman  <othman@cs.wustl.edu>

	With this latest set of updates I was able to build a C++ shared
	library using a C++ configuration tag for g++ on Linux!  Some may
	think that this isn't much of an accomplishment but static
	constructors appear to work now, whereas prior to the addition of
	the multi-language support patches they didn't.

	* libtool.m4:

	Made invocation of ltconfig in AC_LIBTOOL_CXX macro more like the
	one in AC_PROG_LIBTOOL.  This adds some ILD related flags to the
	invocation, in addition to providing the $libtool_flags to
	ltconfig that was previously in AC_PROG_LIBTOOL (via
	AC_LIBTOOL_SETUP).  This fixes an ILD related bug with the C++
	support, and also fixes a problem where both the static and shared
	libraries were being built even if one of them was explicitly
	disabled.
	
	* ltcf-cxx.sh:

	Make sure $ac_cv_prog_cc_pic_works and $ac_cv_prog_cc_static_works
	are unset since their C compiler cached values will override their
	C++ compiler specific values.  Note that it was not enough to
	reset their values.  They had to be unset.

Sat Dec  4 14:31:24 1999  Ossama Othman  <ossama@debian.org>

	* doc/libtool.texi:

	Moved "LTCC" in "--add-tag" example before "CC" because users may
	inadvertently do something like the following:

		CC=$CXX LTCC=$CC ./ltconfig --add-tag=...

	Doing the above would set LTCC to the C++ compiler ($CXX), which
	is incorrect since LTCC should be the C compiler.  Also added
	documentation explaining this potential problem.

	* Makefile.am:

	Added ltcf-c.sh, ltcf-cxx.sh and ChangeLog.1 to list of files to
	include in the distribution.

	Added ltcf-sh.sh and ltcf-cxx.sh to the list of data files.

	* libtool.m4:

	Change name of macro that enables C++ support in libtool from
	"AC_LIBTOOL_CPP" to "AC_LIBTOOL_CXX."  "CPP" is typically
	associated with preprocessors, whereas CXX is associated with C++
	compilers.

	Moved LTCC before CC in call to ltconfig to make sure LTCC is not
	set to the compiler pointed to by CC after CC has been reset to
	another compiler.

	Call ltconfig with ${CONFIG_SHELL-/bin/sh} just like we do in
	AC_PROG_LIBTOOL.

	Save value of $CC and $CFLAGS before resetting them for use with
	configuration tags.

	* libtoolize.in:

	Added ltcf-c.sh to list of files related to "libtoolization."
	Until we decide if other compiler/language libtool configuation
	scripts should also be included in the file list, leave out
	ltcf-cxx.sh for now.

	* ltcf-cxx.sh:

	Disable shared library support for currently unconfigured
	platforms.

	Updated IRIX, Linux and Solaris link characteristics.  They now
	match more with their C compiler counterparts.

	* ltconfig.in:

	Corrected tag name variable in "END LIBTOOL TAG CONFIG: $tagname"
	text.

Fri Dec  3 19:21:39 1999  Ossama Othman  <ossama@debian.org>

	* Makefile.am:
	* libtool.m4:
	* ltconfig.in:
	* ltmain.in:
	* doc/libtool.texi
	* tests/defs:

	The beginnings of multi-compiler/language support in libtool.

	Integrated Alexandre's configuration tags patch, part of Thomas'
	patch and part of my patch.

	These patches make it possible for libtool to support
	compilers besides C compilers.  This also includes support for
	linkers besides `ld', and similarly for other tools commonly used
	for development.  See the libtool documentation for more details.

	Moved all C compiler related configuration code to `ltcf-c.sh',
	described below.

	Multi-compiler/language still isn't complete but testing is now
	possible.

	* ltcf-c.sh:

	Added this file.  It contains all of the C compiler related
	configuration code that was previously in ltconfig.in.  This
	script is meant to be sourced by the ltconfig script alone.  It is
	not meant for use by the user.  Eventually, the contents of this
	file will be moved to `libtool.m4'.

	* ltcf-cxx.sh:

	Added this file.  It contains C++ compiler related configuration
	code (e.g. C++ compiler as linker, etc).  It is meant to be used
	when creating configuration tags using the newly added "--add-tag"
	ltconfig option.  See the libtool documentation for more details.
	Eventually, the contents of this file will be moved to
	`libtool.m4'.

	This script also includes support for extracting the objects and
	libraries the compiler would use when linking a C++ binary.  This
	support should allow static constructors and the like to work
	properly.

Continued in ChangeLog.1

	$Revision$ $Date$
