* Another form of convenience library, suggested by Alexandre Oliva,
is to have undocumented utility libraries, where only the shared
version is installed.

* Somehow we need to make sure that static libraries never appear in
$deplibs.  If a program linked against a library doesn't contain the
basename of the library (or is the same size), then the library is
probably static.

* A better check to detect broken collect2 on AIX, once the bug is
fixed in GCC.

* We could use libtool object convenience libraries that resolve
symbols to be included in a libtool archive.

* Delete dlname mode, and integrate DLD support.  We need a way for
different major versions of the same .la to coexist.  This also
involves writing a better uninstall mode, so that nothing breaks.

Semantics:

# Just link a library normally.
./libtool gcc -o testld testld.o libhello.la -lm

# Again, link normally.
./libtool gcc -o testld -export-dynamic testld.o libhello.la -lm

# This time, preload the symbols from the specified library (or
# object), as well as normal linking.
./libtool gcc -o testld -export-dynamic testld.o -dlopen libhello.la -lm
dlfiles="$dlfiles libhello.la"

This defines an array called `dld_preloaded_symbols', that can be used
to lookup symbols already present in the running executable.

* Implement full multi-language support.  Currently, this is only for
C++, but there are beginnings of this in the manual (Other Languages).
This includes writing libtool not to be so dependent on the compiler
used to configure it.

* Need to finalize the documentation, and give a specification of
`.la' files so that people can depend on their format.  This also
needs to be done so that DLD uses a public interface to libtool
archives.  This would be a good thing to put before the maintainance
notes.

Things to think about:
**********************

* Implement full support for other orthogonal library types
(libhello_g, libhello_p).  Make these types configurable.  Some
thinking will have to be done about the defaults, and what libhello
(standard type) should be.

Maybe we should just add an autoconf macro and get creative with
library_transform_name, or something.  These changes should be
partially driven by the needs of packaging tools, such as RPM and
dpkg.

* Talk with RMS about his so-called `automatic package generation
tool.'  This is probably what Thomas has been murmuring about for the
Hurd.  We'll need to integrate package-supplied programs such as
libtool into that scheme, since it manages some of the preinstall and
postinstall commands, but isn't installed itself.  Probably, things
like libtool should be distributed as part of such a binary package.

* Add support for windoze DLL's, and maybe other jumptable libs.
Check out Lesstif and Tcl configuration again (maybe they would be
interested in libtool by now?).  The Cygnus win32 project may also be
of value, though it still seems pretty rudimentary right now.
