In the near future:
********************

* check whether the version of libtool.m4 is compatible
with ltconfig/ltmain.sh

* We could have an option to hardcode paths into libraries, as well as
binaries: `... -Wl,-soname -Wl,/tmp/libtest.so.0 ...'.  This is not
possible on all platforms, and is in part obviated by the ability of
linking libtool libraries specified with -lname, but it might still
be desirable.

* Lists of exported symbols should be stored in the pseudo library
so that the size of lt_preloaded_symbols can be reduced.

In the future:
**************

* Godmar Back writes:
  libltdl uses such stdio functions as fopen, fgets, feof, fclose, and others.
  These functions are not async-signal-safe. While this does not make 
  libltdl unusable, it restricts its usefulness and puts an 
  unnecessary burden on the user.

  As a remedy, I'd recommend to replace those functions with functions
  that POSIX says are async-signal-safe, such as open, read, close.
  This will require you to handle interrupted system calls and implement
  fgets, but the former isn't hard and there's plenty of implementations
  out from which you can steal the latter.

  I believe relying on async-signal-safe functions to the greatest extent
  possible would greatly improve libltdl's ability to be embedded in and 
  used by other systems.

* Pavel Roskin writes about --enable-pic-static:
  Is it true that the objects which are suitable for building shared
  libraries are always suitable for building static libraries?  If yes,
  would it be a good idea to have an option which would enable building
  shared and static libraries from the same object files.  50% speedup is
   worth considering IMHO.

* Support -dlopen/dlpreopen for libraries.
  This requires adding two new variables (dlopen/dlpreopen) to
  the pseudo-library and later dlopening them when a program is linked
  against such a library.

* Fix */demo on win32.
This may simply require resolving the item below.

* Figure out how to use data items in dlls with win32.
The difficult part is compiling each object which will be linked with an
import lib differently than if it will be linked with a static lib.  This will
almost definitely require that automake pass some hints about linkage in to
each object compilation line.

* jeffdb@goodnet.com writes
	all you need to do for mutually dependant
	.dll's is to create an implib from a .def file
so it appears that we might need to detect and handle mutual dependencies
specially on win32 =(O|

* If not cross-compiling, have the static flag test run the resulting
binary to make sure everything works.

* Implement full multi-language support.  Currently, this is only for
C++, but there are beginnings of this in the manual (Other Languages).
This includes writing libtool not to be so dependent on the compiler
used to configure it.

We especially need this for C++ linking, for which libtool currently
does not handle static constructors properly, even on operating
systems that support them.  ``Don't use static constructors'' is no
longer a satisfactory answer.

People who need it:
  Jean Daniel Fekete <Jean-Daniel.Fekete@emn.fr>
  Thomas Hiller <hiller@tu-harburg.d400.de>

* We need some mechanism to allow users to pass flags to the linker
and/or to the compiler, when creating libtool archives.  We could
recognize linker flags such as `-Wl,flag' and `-Xlinker flag' in
libtool's command line, and passing them down to the linker, if "$wl"
is `-Wl,', or stripping the `-Wl,' part if we're calling `ld'
directly.  We could also introduce `-Wc,flag' and `-Xcompiler flag' to
allow unrecognized flags to be passed to the compiler, after stripping
by libtool.

* Another form of convenience library, suggested by Alexandre Oliva,
is to have undocumented utility libraries, where only the shared
version is installed.

* We could use libtool object convenience libraries that resolve
symbols to be included in a libtool archive.  This would require some
sort of -whole-archive option, as well.

* Currently, convenience libraries (.al) are built from .lo objects,
except when --disable-shared.  When we can build both shared and
static libraries, we should probably create a .al out of .lo objects
and also a .a out of .o objects.  The .al would only be used to
create shared libraries, whereas the .a would be used for creating
static libraries and programs.

* Try to find a work-around for -[all-]static and libltdl on platforms
that will fail to find dlopening functions in this case, such as AIX
4.3.2.0.  Maybe creating an alternate libltdl that provides only for
dlpreopening, or creating an additional static library to provide
dummy implementations of the functions that can't be linked
statically.  This could hardly be made completely transparent, though.

* Need to finalize the documentation, and give a specification of
`.la' files so that people can depend on their format.  This also
needs to be done so that DLD uses a public interface to libtool
archives.  This would be a good thing to put before the maintainance
notes.

* Filenames containing shell meta-characters are not properly handled
by libtool.  Compiling a file named "a;b.c", for example, fails.

Things to think about:
**********************

* Talk with RMS about his so-called `automatic package generation
tool.'  This is probably what Thomas has been murmuring about for the
Hurd.  We'll need to integrate package-supplied programs such as
libtool into that scheme, since it manages some of the preinstall and
postinstall commands, but isn't installed itself.  Probably, things
like libtool should be distributed as part of such a binary package.

* Maybe implement full support for other orthogonal library types
(libhello_g, libhello_p, 64 vs 32-bit ABI's, etc).  Make these types
configurable.
